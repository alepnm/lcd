<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\out\test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\out\test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Sat Nov 14 12:18:53 2015
<BR><P>
<H3>Maximum Stack Usage =        360 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
task_appGUI_func &rArr; HMI_Control &rArr; HMI_ChangeWindow &rArr; winPlotInit &rArr; plotDataCalculate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[8b]">tn_start_exe</a>
 <LI><a href="#[b]">PendSV_Handler</a>
 <LI><a href="#[ab]">tn_switch_context_exit</a>
 <LI><a href="#[86]">tn_switch_context</a>
 <LI><a href="#[15d]">tn_int_exit</a>
 <LI><a href="#[7f]">tn_cpu_save_sr</a>
 <LI><a href="#[80]">tn_cpu_restore_sr</a>
 <LI><a href="#[99]">tn_chk_irq_disabled</a>
 <LI><a href="#[21f]">ffs_asm</a>
 <LI><a href="#[1ce]">__user_initial_stackheap</a>
 <LI><a href="#[334]">tn_startup_hardware_init</a>
 <LI><a href="#[170]">tn_arm_disable_interrupts</a>
 <LI><a href="#[17a]">tn_arm_enable_interrupts</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[1f]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[21]">CAN1_RX0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[20]">CAN1_TX_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4d]">CAN2_RX0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4e]">CAN2_RX1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4f]">CAN2_SCE_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4c]">CAN2_TX_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5c]">CRYP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5b]">DCMI_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream1_IRQHandler</a> from tn_user.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream3_IRQHandler</a> from tn_user.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream5_IRQHandler</a> from tn_user.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream6_IRQHandler</a> from tn_user.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream7_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream5_IRQHandler</a> from tn_user.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream6_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream7_IRQHandler</a> from tn_user.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4a]">ETH_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4b]">ETH_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3d]">FSMC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5d]">HASH_RNG_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6f]">HMIBtn_Exit</a> from hmi_control.o(.text) referenced 2 times from winuartcfg.o(.text)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[56]">I2C3_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[55]">I2C3_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6b]">LCD_DrawChar_HX8347A</a> from lcdhal_hx8347a.o(.text) referenced from lcdhal_universal.o(.text)
 <LI><a href="#[65]">LCD_DrawChar_ILI9320</a> from lcdhal_ili9320.o(.text) referenced from lcdhal_universal.o(.text)
 <LI><a href="#[6c]">LCD_DrawFillRect_HX8347A</a> from lcdhal_hx8347a.o(.text) referenced from lcdhal_universal.o(.text)
 <LI><a href="#[66]">LCD_DrawFillRect_ILI9320</a> from lcdhal_ili9320.o(.text) referenced from lcdhal_universal.o(.text)
 <LI><a href="#[6d]">LCD_DrawMonoPict_HX8347A</a> from lcdhal_hx8347a.o(.text) referenced from lcdhal_universal.o(.text)
 <LI><a href="#[67]">LCD_DrawMonoPict_ILI9320</a> from lcdhal_ili9320.o(.text) referenced from lcdhal_universal.o(.text)
 <LI><a href="#[6a]">LCD_PutPixel_HX8347A</a> from lcdhal_hx8347a.o(.text) referenced from lcdhal_universal.o(.text)
 <LI><a href="#[64]">LCD_PutPixel_ILI9320</a> from lcdhal_ili9320.o(.text) referenced from lcdhal_universal.o(.text)
 <LI><a href="#[69]">LCD_SetWindow_HX8347A</a> from lcdhal_hx8347a.o(.text) referenced from lcdhal_universal.o(.text)
 <LI><a href="#[63]">LCD_SetWindow_ILI9320</a> from lcdhal_ili9320.o(.text) referenced from lcdhal_universal.o(.text)
 <LI><a href="#[6e]">LCD_WriteBMP_HX8347A</a> from lcdhal_hx8347a.o(.text) referenced from lcdhal_universal.o(.text)
 <LI><a href="#[68]">LCD_WriteBMP_ILI9320</a> from lcdhal_ili9320.o(.text) referenced from lcdhal_universal.o(.text)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[50]">OTG_FS_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[37]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5a]">OTG_HS_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[59]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from tn_port_cm3_armcc.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[36]">RTC_Alarm_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[10]">RTC_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3e]">SDIO_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from tn_user.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[61]">SystemInit</a> from system_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(.text)
 <LI><a href="#[f]">TAMP_STAMP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_TIM9_IRQHandler</a> from beeper.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[26]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[43]">TIM6_DAC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[44]">TIM7_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[39]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from tn_user.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from tn_user.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from tn_user.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[54]">USART6_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[70]">__main</a> from __main.o(!!!main) referenced from startup_stm32f2xx.o(.text)
 <LI><a href="#[1b2]">btnMain_Menu</a> from winmain.o(.text) referenced from winmain.o(.text)
 <LI><a href="#[1b1]">btnMain_Plot</a> from winmain.o(.text) referenced from winmain.o(.text)
 <LI><a href="#[1b3]">btnUartCfg_OKClick</a> from winuartcfg.o(.text) referenced from winuartcfg.o(.text)
 <LI><a href="#[1c5]">plotCenter</a> from winplot.o(.text) referenced from winplot.o(.text)
 <LI><a href="#[1c2]">plotDown</a> from winplot.o(.text) referenced from winplot.o(.text)
 <LI><a href="#[1c7]">plotLeft</a> from winplot.o(.text) referenced from winplot.o(.text)
 <LI><a href="#[1c6]">plotRight</a> from winplot.o(.text) referenced from winplot.o(.text)
 <LI><a href="#[1c4]">plotUp</a> from winplot.o(.text) referenced from winplot.o(.text)
 <LI><a href="#[1a8]">task_appGUI_func</a> from appgui.o(.text) referenced from appgui.o(.text)
 <LI><a href="#[1a6]">task_uart_func</a> from tn_task_usart.o(.text) referenced from tn_task_usart.o(.text)
 <LI><a href="#[5f]">tn_idle_task_func</a> from tn.o(.text) referenced from tn.o(.text)
 <LI><a href="#[60]">tn_task_exit</a> from tn_tasks.o(.text) referenced from tn_port_cm3.o(.text)
 <LI><a href="#[5e]">tn_timer_task_func</a> from tn.o(.text) referenced from tn.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[70]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[71]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[73]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1f8]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1f9]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1fa]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1fb]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1fc]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[77]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1fd]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1fe]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1ff]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[200]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[201]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[202]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[203]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[204]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[205]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[206]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[207]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[208]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[209]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[20a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[20b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[20c]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[20d]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[20e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[20f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[210]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[211]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[7c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[212]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[213]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[214]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[215]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[216]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[217]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[72]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[218]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[74]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[76]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[219]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[78]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; tn_start_system &rArr; tn_task_create &rArr; task_to_runnable
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[21a]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1cf]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[7b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[21b]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[7d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[87]"></a>tn_start_system</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, tn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tn_start_system &rArr; tn_task_create &rArr; task_to_runnable
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_create
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_start_exe
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_to_runnable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>tn_sys_tslice_ticks</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_inside_int
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_save_sr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_restore_sr
</UL>

<P><STRONG><a name="[8e]"></a>tn_tick_int_processing</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, tn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tn_tick_int_processing
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_inside_int
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_save_sr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_restore_sr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_remove_tail
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_remove_entry
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_add_tail
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_add_head
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_queue_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[93]"></a>tn_mutex_create</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tn_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_reset
</UL>

<P><STRONG><a name="[95]"></a>find_max_blocked_priority</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, tn_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = find_max_blocked_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_unlock_mutex
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wait_complete
</UL>

<P><STRONG><a name="[94]"></a>do_unlock_mutex</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, tn_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = do_unlock_mutex &rArr; task_wait_complete &rArr; set_current_priority &rArr; change_running_task_priority &rArr; find_next_task_to_run
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_running_task_priority
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_max_blocked_priority
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_remove_head
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wait_complete
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_remove_entry
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_add_tail
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_queue_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_terminate
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_exit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_unlock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_delete
</UL>

<P><STRONG><a name="[98]"></a>tn_mutex_delete</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, tn_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_unlock_mutex
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_chk_irq_disabled
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_remove_head
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_switch_context
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_inside_int
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_save_sr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_restore_sr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wait_complete
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_reset
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_queue_empty
</UL>

<P><STRONG><a name="[9a]"></a>tn_mutex_lock</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, tn_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_priority
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_running_task_priority
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_switch_context
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_inside_int
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_save_sr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_restore_sr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_curr_to_wait_action
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_add_tail
</UL>

<P><STRONG><a name="[9c]"></a>tn_mutex_lock_polling</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, tn_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_running_task_priority
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_inside_int
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_save_sr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_restore_sr
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_add_tail
</UL>

<P><STRONG><a name="[9d]"></a>tn_mutex_unlock</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tn_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_unlock_mutex
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_switch_context
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_inside_int
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_save_sr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_restore_sr
</UL>

<P><STRONG><a name="[8a]"></a>task_to_runnable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tn_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task_to_runnable
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_terminate
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_exit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_iactivate
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_activate
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_resume
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_create
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wait_complete
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_start_system
</UL>

<P><STRONG><a name="[9e]"></a>task_set_dormant_state</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tn_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = task_set_dormant_state
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_terminate
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_exit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_create
</UL>

<P><STRONG><a name="[89]"></a>tn_task_create</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, tn_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tn_task_create &rArr; task_to_runnable
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_stack_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_set_dormant_state
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_inside_int
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_save_sr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_restore_sr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_to_runnable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_start_system
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_task_create
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appGUI_task_create
</UL>

<P><STRONG><a name="[a1]"></a>find_next_task_to_run</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tn_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = find_next_task_to_run
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_to_non_runnable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_running_task_priority
</UL>

<P><STRONG><a name="[a0]"></a>task_to_non_runnable</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tn_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = task_to_non_runnable &rArr; find_next_task_to_run
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_task_to_run
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_remove_entry
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_queue_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_terminate
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_exit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_suspend
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_curr_to_wait_action
</UL>

<P><STRONG><a name="[a2]"></a>tn_task_suspend</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tn_tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_to_non_runnable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_switch_context
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_inside_int
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_save_sr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_restore_sr
</UL>

<P><STRONG><a name="[a3]"></a>tn_task_resume</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tn_tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_switch_context
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_inside_int
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_save_sr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_restore_sr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_to_runnable
</UL>

<P><STRONG><a name="[85]"></a>task_curr_to_wait_action</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tn_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = task_curr_to_wait_action &rArr; task_to_non_runnable &rArr; find_next_task_to_run
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_to_non_runnable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_reset
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_sleep
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_lock
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_timer_task_func
</UL>

<P><STRONG><a name="[a4]"></a>tn_task_sleep</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tn_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tn_task_sleep &rArr; task_curr_to_wait_action &rArr; task_to_non_runnable &rArr; find_next_task_to_run
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_switch_context
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_inside_int
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_save_sr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_restore_sr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_curr_to_wait_action
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_appGUI_func
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_uart_func
</UL>

<P><STRONG><a name="[96]"></a>change_running_task_priority</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tn_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = change_running_task_priority &rArr; find_next_task_to_run
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_task_to_run
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_remove_entry
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_add_tail
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_queue_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_change_priority
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_priority
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_lock_polling
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_lock
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_unlock_mutex
</UL>

<P><STRONG><a name="[9b]"></a>set_current_priority</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tn_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_current_priority &rArr; change_running_task_priority &rArr; find_next_task_to_run
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_running_task_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_lock
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wait_complete
</UL>

<P><STRONG><a name="[84]"></a>task_wait_complete</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, tn_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = task_wait_complete &rArr; set_current_priority &rArr; change_running_task_priority &rArr; find_next_task_to_run
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_priority
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_max_blocked_priority
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_to_runnable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_remove_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_irelease_wait
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_release_wait
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_iwakeup
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_wakeup
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_delete
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_unlock_mutex
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_timer_task_func
</UL>

<P><STRONG><a name="[a5]"></a>tn_task_wakeup</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tn_tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_switch_context
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_inside_int
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_save_sr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_restore_sr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wait_complete
</UL>

<P><STRONG><a name="[a6]"></a>tn_task_iwakeup</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, tn_tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_inside_int
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_save_sr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_restore_sr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wait_complete
</UL>

<P><STRONG><a name="[a7]"></a>tn_task_activate</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tn_tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_switch_context
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_inside_int
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_save_sr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_restore_sr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_to_runnable
</UL>

<P><STRONG><a name="[a8]"></a>tn_task_iactivate</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tn_tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_inside_int
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_save_sr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_restore_sr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_to_runnable
</UL>

<P><STRONG><a name="[a9]"></a>tn_task_release_wait</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tn_tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_switch_context
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_inside_int
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_save_sr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_restore_sr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wait_complete
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_remove_entry
</UL>

<P><STRONG><a name="[aa]"></a>tn_task_irelease_wait</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tn_tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_inside_int
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_save_sr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_restore_sr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wait_complete
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_remove_entry
</UL>

<P><STRONG><a name="[60]"></a>tn_task_exit</STRONG> (Thumb, 158 bytes, Stack size 88 bytes, tn_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tn_task_exit &rArr; do_unlock_mutex &rArr; task_wait_complete &rArr; set_current_priority &rArr; change_running_task_priority &rArr; find_next_task_to_run
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_switch_context_exit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_stack_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_to_non_runnable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_set_dormant_state
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_unlock_mutex
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_remove_head
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_inside_int
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_save_sr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_to_runnable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_remove_entry
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_queue_empty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tn_port_cm3.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>tn_task_terminate</STRONG> (Thumb, 244 bytes, Stack size 96 bytes, tn_tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_stack_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_to_non_runnable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_set_dormant_state
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_unlock_mutex
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_remove_head
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_switch_context
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_inside_int
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_save_sr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_restore_sr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_to_runnable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_remove_entry
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_queue_empty
</UL>

<P><STRONG><a name="[ad]"></a>tn_task_delete</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tn_tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_inside_int
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_save_sr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_restore_sr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_remove_entry
</UL>

<P><STRONG><a name="[ae]"></a>tn_task_change_priority</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, tn_tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_running_task_priority
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_switch_context
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_inside_int
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_save_sr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_restore_sr
</UL>

<P><STRONG><a name="[88]"></a>queue_reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tn_utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_set_dormant_state
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_delete
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_create
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_curr_to_wait_action
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_start_system
</UL>

<P><STRONG><a name="[8f]"></a>is_queue_empty</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tn_utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_terminate
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_exit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_to_non_runnable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_running_task_priority
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_delete
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_unlock_mutex
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_tick_int_processing
</UL>

<P><STRONG><a name="[91]"></a>queue_add_head</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tn_utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_tick_int_processing
</UL>

<P><STRONG><a name="[92]"></a>queue_add_tail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tn_utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_running_task_priority
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_lock_polling
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_lock
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_unlock_mutex
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_create
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_to_runnable
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_curr_to_wait_action
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_tick_int_processing
</UL>

<P><STRONG><a name="[97]"></a>queue_remove_head</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tn_utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_terminate
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_exit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_delete
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_unlock_mutex
</UL>

<P><STRONG><a name="[90]"></a>queue_remove_tail</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tn_utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_tick_int_processing
</UL>

<P><STRONG><a name="[83]"></a>queue_remove_entry</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tn_utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_delete
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_terminate
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_exit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_irelease_wait
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_release_wait
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_to_non_runnable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_running_task_priority
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_unlock_mutex
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wait_complete
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_tick_int_processing
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_timer_task_func
</UL>

<P><STRONG><a name="[21c]"></a>queue_contains_entry</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tn_utils.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>dque_fifo_write</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, tn_utils.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>dque_fifo_read</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, tn_utils.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>tn_stack_init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, tn_port_cm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tn_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_terminate
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_exit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_create
</UL>

<P><STRONG><a name="[8b]"></a>tn_start_exe</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tn_port_cm3_armcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_start_system
</UL>

<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tn_port_cm3_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>tn_switch_context_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tn_port_cm3_armcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_exit
</UL>

<P><STRONG><a name="[86]"></a>tn_switch_context</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tn_port_cm3_armcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_change_priority
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_terminate
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_release_wait
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_activate
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_wakeup
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_sleep
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_resume
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_suspend
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_unlock
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_lock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_delete
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_timer_task_func
</UL>

<P><STRONG><a name="[15d]"></a>tn_int_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tn_port_cm3_armcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream5_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_calc_performance
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
</UL>

<P><STRONG><a name="[7f]"></a>tn_cpu_save_sr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tn_port_cm3_armcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_change_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_delete
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_terminate
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_exit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_irelease_wait
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_release_wait
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_iactivate
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_activate
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_iwakeup
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_wakeup
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_sleep
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_resume
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_suspend
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_unlock
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_lock_polling
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_lock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_delete
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_create
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_tick_int_processing
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_sys_tslice_ticks
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_timer_task_func
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_idle_task_func
</UL>

<P><STRONG><a name="[80]"></a>tn_cpu_restore_sr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tn_port_cm3_armcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_change_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_delete
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_terminate
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_irelease_wait
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_release_wait
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_iactivate
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_activate
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_iwakeup
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_wakeup
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_sleep
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_resume
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_suspend
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_unlock
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_lock_polling
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_lock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_delete
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_create
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_tick_int_processing
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_sys_tslice_ticks
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_timer_task_func
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_idle_task_func
</UL>

<P><STRONG><a name="[99]"></a>tn_chk_irq_disabled</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tn_port_cm3_armcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_delete
</UL>

<P><STRONG><a name="[21f]"></a>ffs_asm</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tn_port_cm3_armcc.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_cfg
</UL>

<P><STRONG><a name="[221]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f2xx_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_cfg
</UL>

<P><STRONG><a name="[225]"></a>DMA_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_cfg
</UL>

<P><STRONG><a name="[226]"></a>DMA_PeriphIncOffsetSizeConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[1a7]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_uart_func
</UL>

<P><STRONG><a name="[228]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>DMA_MemoryTargetConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>DMA_GetCurrentMemoryTarget</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>DMA_GetFIFOStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>DMA_ClearFlag</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream5_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[22f]"></a>DMA_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>DMA_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>FLASH_SetLatency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[188]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[232]"></a>FLASH_InstructionCacheCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>FLASH_DataCacheCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>FLASH_InstructionCacheReset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>FLASH_DataCacheReset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>FLASH_Unlock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteBuf
</UL>

<P><STRONG><a name="[102]"></a>FLASH_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteBuf
</UL>

<P><STRONG><a name="[b0]"></a>FLASH_GetStatus</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[af]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Launch
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDPConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRPConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramByte
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramDoubleWord
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllSectors
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>

<P><STRONG><a name="[b1]"></a>FLASH_EraseSector</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteBuf
</UL>

<P><STRONG><a name="[b2]"></a>FLASH_EraseAllSectors</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f2xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[b3]"></a>FLASH_ProgramDoubleWord</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f2xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[b4]"></a>FLASH_ProgramWord</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, stm32f2xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[b5]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteBuf
</UL>

<P><STRONG><a name="[b6]"></a>FLASH_ProgramByte</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, stm32f2xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[236]"></a>FLASH_OB_Unlock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>FLASH_OB_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>FLASH_OB_WRPConfig</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32f2xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[b8]"></a>FLASH_OB_RDPConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f2xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[b9]"></a>FLASH_OB_UserConfig</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, stm32f2xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[238]"></a>FLASH_OB_BORConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>FLASH_OB_Launch</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f2xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[239]"></a>FLASH_OB_GetUser</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>FLASH_OB_GetWRP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>FLASH_OB_GetRDP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>FLASH_OB_GetBOR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>FLASH_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>FLASH_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteBuf
</UL>

<P><STRONG><a name="[23f]"></a>FSMC_NORSRAMDeInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
</UL>

<P><STRONG><a name="[240]"></a>FSMC_NORSRAMStructInit</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
</UL>

<P><STRONG><a name="[241]"></a>FSMC_NANDDeInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>FSMC_NANDInit</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>FSMC_NANDStructInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>FSMC_NANDCmd</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>FSMC_NANDECCCmd</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>FSMC_GetECC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>FSMC_PCCARDDeInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[248]"></a>FSMC_PCCARDInit</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>FSMC_PCCARDStructInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>FSMC_PCCARDCmd</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>FSMC_ITConfig</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>FSMC_GetFlagStatus</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>FSMC_ClearFlag</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>FSMC_GetITStatus</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>FSMC_ClearITPendingBit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>GPIO_DeInit</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, stm32f2xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[153]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_SPI_Config
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_cfg
</UL>

<P><STRONG><a name="[250]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchGetY
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchGetX
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTouchState
</UL>

<P><STRONG><a name="[252]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_SPI_Config
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchGetY
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchGetX
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset_Off
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
</UL>

<P><STRONG><a name="[152]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchGetY
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchGetX
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset_On
</UL>

<P><STRONG><a name="[255]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[15c]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
</UL>

<P><STRONG><a name="[160]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_SPI_Config
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
</UL>

<P><STRONG><a name="[1a1]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_iwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[1a2]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_iwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[1a3]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_iwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[1a4]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_iwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[1a5]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_iwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[256]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>RCC_DeInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[187]"></a>RCC_HSEConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[be]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_cfg
</UL>

<P><STRONG><a name="[bd]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[257]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[17f]"></a>RCC_LSEConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_cfg
</UL>

<P><STRONG><a name="[258]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>RCC_PLLConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_PLLConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[18a]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[259]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>RCC_MCO1Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>RCC_MCO2Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[190]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[18b]"></a>RCC_HCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[18c]"></a>RCC_PCLK1Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[18d]"></a>RCC_PCLK2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[d4]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_cfg
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_cfg
</UL>

<P><STRONG><a name="[180]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_cfg
</UL>

<P><STRONG><a name="[181]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_cfg
</UL>

<P><STRONG><a name="[25e]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_SPI_Config
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_cfg
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[260]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[165]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_SPI_Config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[150]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_cfg
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[bc]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[261]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[c0]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[263]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>RCC_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>RCC_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>RCC_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>TIM_DeInit</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[155]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_cfg
</UL>

<P><STRONG><a name="[193]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_cfg
</UL>

<P><STRONG><a name="[26c]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper_Init
</UL>

<P><STRONG><a name="[277]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_cfg
</UL>

<P><STRONG><a name="[278]"></a>TIM_OC3Init</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>TIM_OC4Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[27a]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[27b]"></a>TIM_SelectOCxM</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[280]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper_Init
</UL>

<P><STRONG><a name="[285]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[286]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[290]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[292]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[294]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[295]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[297]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[c8]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[c6]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[c4]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[c2]"></a>TIM_ICInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[298]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[299]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>TIM_GetCapture4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[29d]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper_Init
</UL>

<P><STRONG><a name="[2a2]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a3]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
</UL>

<P><STRONG><a name="[15b]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
</UL>

<P><STRONG><a name="[2a5]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[cc]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[ce]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[d0]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[cf]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[d1]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[2a9]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ac]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ad]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ae]"></a>TIM_RemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>USART_DeInit</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[d3]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_cfg
</UL>

<P><STRONG><a name="[2af]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2b0]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2b1]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2b2]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2b3]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2b5]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2b6]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2b7]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2b8]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2b9]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2ba]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2bb]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2bf]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2c0]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2c1]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2c3]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_cfg
</UL>

<P><STRONG><a name="[2c4]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2c5]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>USART_GetITStatus</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[179]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_cfg
</UL>

<P><STRONG><a name="[d6]"></a>RTC_EnterInitMode</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
</UL>

<P><STRONG><a name="[d5]"></a>RTC_DeInit</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_DeInit &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_cfg
</UL>

<P><STRONG><a name="[d9]"></a>RTC_ExitInitMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[d8]"></a>RTC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[2c7]"></a>RTC_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[2c8]"></a>RTC_WriteProtectionCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>RTC_RefClockCmd</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[db]"></a>RTC_SetTime</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_cfg
</UL>

<P><STRONG><a name="[2c9]"></a>RTC_TimeStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>RTC_GetTime</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[df]"></a>RTC_SetDate</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_cfg
</UL>

<P><STRONG><a name="[2ca]"></a>RTC_DateStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>RTC_GetDate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[e1]"></a>RTC_SetAlarm</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>

<P><STRONG><a name="[2cb]"></a>RTC_AlarmStructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>RTC_GetAlarm</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[2cc]"></a>RTC_AlarmCmd</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>RTC_WakeUpClockConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>RTC_SetWakeUpCounter</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>RTC_GetWakeUpCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>RTC_WakeUpCmd</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>RTC_DayLightSavingConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>RTC_GetStoreOperation</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>RTC_OutputConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>RTC_CoarseCalibConfig</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[e4]"></a>RTC_CoarseCalibCmd</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[2d4]"></a>RTC_CalibOutputCmd</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[2d5]"></a>RTC_TimeStampCmd</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>RTC_GetTimeStamp</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[2d6]"></a>RTC_TamperTriggerConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>RTC_TamperCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>RTC_WriteBackupRegister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_cfg
</UL>

<P><STRONG><a name="[17d]"></a>RTC_ReadBackupRegister</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_cfg
</UL>

<P><STRONG><a name="[2d8]"></a>RTC_TamperPinSelection</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[2d9]"></a>RTC_TimeStampPinSelection</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>RTC_OutputTypeConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>RTC_ITConfig</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_cfg
</UL>

<P><STRONG><a name="[2dc]"></a>RTC_ClearFlag</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>RTC_GetITStatus</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>ADC_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[195]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_cfg
</UL>

<P><STRONG><a name="[2df]"></a>ADC_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>ADC_CommonInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_cfg
</UL>

<P><STRONG><a name="[2e0]"></a>ADC_CommonStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_cfg
</UL>

<P><STRONG><a name="[2e1]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2e3]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_cfg
</UL>

<P><STRONG><a name="[2e4]"></a>ADC_VBATCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_cfg
</UL>

<P><STRONG><a name="[2e5]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2e7]"></a>ADC_EOCOnEachRegularChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2e8]"></a>ADC_ContinuousModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2eb]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2ec]"></a>ADC_GetMultiModeConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_cfg
</UL>

<P><STRONG><a name="[197]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_cfg
</UL>

<P><STRONG><a name="[2ed]"></a>ADC_MultiModeDMARequestAfterLastTransferCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2ef]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f1]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>ADC_ExternalTrigInjectedConvEdgeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>ADC_SoftwareStartInjectedConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f5]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>ADC_ITConfig</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f9]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>ADC_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>PWR_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f2xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[17e]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_cfg
</UL>

<P><STRONG><a name="[2fd]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2fe]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>PWR_BackupRegulatorCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>PWR_FlashPowerDownCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>PWR_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f2xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[166]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f2xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_SPI_Config
</UL>

<P><STRONG><a name="[306]"></a>I2S_Init</STRONG> (Thumb, 350 bytes, Stack size 36 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_SPI_Config
</UL>

<P><STRONG><a name="[309]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_SPI_Config
</UL>

<P><STRONG><a name="[169]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_SPI_Config
</UL>

<P><STRONG><a name="[30c]"></a>SPI_TIModeCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchGetY
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchGetX
</UL>

<P><STRONG><a name="[16c]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchGetY
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchGetX
</UL>

<P><STRONG><a name="[167]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_SPI_Config
</UL>

<P><STRONG><a name="[30d]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[30f]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[310]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[311]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchGetY
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchGetX
</UL>

<P><STRONG><a name="[312]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[313]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(.text)
</UL>
<P><STRONG><a name="[315]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, system_stm32f2xx.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1ce]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f7]"></a>LCD_SetFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcdhal_universal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchCalibration
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextButtonDraw
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGroupDraw
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiLabelDraw
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBoxDraw
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiDrawString
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[107]"></a>LCD_GetFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcdhal_universal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawString
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawTransparentChar
</UL>

<P><STRONG><a name="[ea]"></a>readTypeLCD</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcdhal_universal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = readTypeLCD &rArr; LCD_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[ec]"></a>LCD_Init</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, lcdhal_universal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_Init &rArr; LCD_FSMCConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiDelay_ms
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorMode
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorGRAM
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset_On
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset_Off
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init_ILI9320
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init_HX8347A
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTypeLCD
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_appGUI_func
</UL>

<P><STRONG><a name="[fa]"></a>LCD_SetWindow</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lcdhal_universal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBitmap_HX8347A
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBitmap_ILI9320
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel_ILI9320
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel_HX8347A
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFillRect_ILI9320
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFillRect_HX8347A
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar_ILI9320
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar_HX8347A
</UL>

<P><STRONG><a name="[108]"></a>LCD_PutPixel</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcdhal_universal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiChartRefresh
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiChartDraw
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillPolyLine
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawUniLine
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawCircle
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawTransparentChar
</UL>

<P><STRONG><a name="[10a]"></a>LCD_DrawChar</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcdhal_universal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ASCII
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiDrawString
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawString
</UL>

<P><STRONG><a name="[105]"></a>LCD_DrawFillRect</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lcdhal_universal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_DrawFillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextButtonDraw
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextButtonStateRefresh
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiLabelDraw
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBoxStateRefresh
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBoxDraw
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiChartDraw
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRoundedRect
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFullRect
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[316]"></a>LCD_DrawMonoPict</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcdhal_universal.o(.text), UNUSED)

<P><STRONG><a name="[317]"></a>LCD_WriteBMP</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcdhal_universal.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>LCD_SetCursor</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcdhal_ili9320.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow_ILI9320
</UL>

<P><STRONG><a name="[63]"></a>LCD_SetWindow_ILI9320</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lcdhal_ili9320.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_SetWindow_ILI9320 &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdhal_universal.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>LCD_PutPixel_ILI9320</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lcdhal_ili9320.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_PutPixel_ILI9320 &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdhal_universal.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>LCD_DrawChar_ILI9320</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, lcdhal_ili9320.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_DrawChar_ILI9320 &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdhal_universal.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>LCD_DrawFillRect_ILI9320</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lcdhal_ili9320.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_DrawFillRect_ILI9320 &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdhal_universal.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>LCD_DrawMonoPict_ILI9320</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lcdhal_ili9320.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_DrawMonoPict_ILI9320
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdhal_universal.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>LCD_WriteBMP_ILI9320</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lcdhal_ili9320.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WriteBMP_ILI9320
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdhal_universal.o(.text)
</UL>
<P><STRONG><a name="[fd]"></a>LCD_WriteBitmap_ILI9320</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lcdhal_ili9320.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
</UL>

<P><STRONG><a name="[f4]"></a>LCD_Init_ILI9320</STRONG> (Thumb, 514 bytes, Stack size 8 bytes, lcdhal_ili9320.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_Init_ILI9320 &rArr; guiDelay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiDelay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[69]"></a>LCD_SetWindow_HX8347A</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lcdhal_hx8347a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetWindow_HX8347A
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdhal_universal.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>LCD_PutPixel_HX8347A</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lcdhal_hx8347a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_PutPixel_HX8347A &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdhal_universal.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>LCD_DrawChar_HX8347A</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, lcdhal_hx8347a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_DrawChar_HX8347A &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdhal_universal.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>LCD_DrawFillRect_HX8347A</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, lcdhal_hx8347a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_DrawFillRect_HX8347A &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdhal_universal.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>LCD_DrawMonoPict_HX8347A</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lcdhal_hx8347a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_DrawMonoPict_HX8347A
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdhal_universal.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>LCD_WriteBMP_HX8347A</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lcdhal_hx8347a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WriteBMP_HX8347A
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdhal_universal.o(.text)
</UL>
<P><STRONG><a name="[fe]"></a>LCD_WriteBitmap_HX8347A</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, lcdhal_hx8347a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
</UL>

<P><STRONG><a name="[f5]"></a>LCD_Init_HX8347A</STRONG> (Thumb, 574 bytes, Stack size 8 bytes, lcdhal_hx8347a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_Init_HX8347A &rArr; guiDelay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiDelay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[146]"></a>EE_ReadBuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ee_emul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EE_ReadBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchLoadCoef
</UL>

<P><STRONG><a name="[ff]"></a>EE_WriteBuf</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, ee_emul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EE_WriteBuf &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchSaveCoef
</UL>

<P><STRONG><a name="[ed]"></a>LCD_SetColorMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guicolor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[103]"></a>LCD_SetPalette</STRONG> (Thumb, 506 bytes, Stack size 0 bytes, guicolor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorGRAM
</UL>

<P><STRONG><a name="[f3]"></a>LCD_SetColorGRAM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, guicolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetColorGRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPalette
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[318]"></a>LCD_GetColorMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guicolor.o(.text), UNUSED)

<P><STRONG><a name="[319]"></a>LCD_GetColorGRAM</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guicolor.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>LCD_SetColors</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, guicolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_SetColors
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchCalibration
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextButtonDraw
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGroupStateRefresh
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGroupDraw
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiLabelDraw
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBoxDraw
</UL>

<P><STRONG><a name="[110]"></a>LCD_GetColors</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, guicolor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillPolyLine
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFullCircle
</UL>

<P><STRONG><a name="[104]"></a>LCD_SetTextColor</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, guicolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetTextColor
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchCalibration
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextButtonDraw
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextButtonStateRefresh
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGroupDraw
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiLabelDraw
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBoxStateRefresh
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBoxDraw
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiChartRefresh
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiChartDraw
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillPolyLine
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFullCircle
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[31a]"></a>LCD_SetBackColor</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, guicolor.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>guiChangeColorLight</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guicolor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGroupDraw
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiLabelDraw
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBoxDraw
</UL>

<P><STRONG><a name="[f6]"></a>LCD_Clear</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, guiprimitives.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_Clear &rArr; LCD_DrawFillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchCalibration
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ChangeWindow
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_appGUI_func
</UL>

<P><STRONG><a name="[106]"></a>LCD_DrawTransparentChar</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, guiprimitives.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetFont
</UL>

<P><STRONG><a name="[109]"></a>LCD_DrawString</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, guiprimitives.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_DrawString &rArr; LCD_DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetFont
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchCalibration
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextButtonDraw
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGroupDraw
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiLabelDraw
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBoxDraw
</UL>

<P><STRONG><a name="[10b]"></a>LCD_DrawLine</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, guiprimitives.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_DrawLine &rArr; LCD_DrawFillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchCalibration
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGroupDraw
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiLabelDraw
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBoxDraw
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiChartRefresh
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiChartDraw
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawQuadRound
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillPolyLine
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFullCircle
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFullRect
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
</UL>

<P><STRONG><a name="[10c]"></a>LCD_DrawRect</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, guiprimitives.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[10d]"></a>LCD_DrawCircle</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, guiprimitives.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_DrawCircle &rArr; LCD_PutPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFullCircle
</UL>

<P><STRONG><a name="[10e]"></a>LCD_DrawFullRect</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, guiprimitives.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFillRect
</UL>

<P><STRONG><a name="[10f]"></a>LCD_DrawFullCircle</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, guiprimitives.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_DrawFullCircle &rArr; LCD_DrawCircle &rArr; LCD_PutPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawCircle
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetColors
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGroupStateRefresh
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGroupDraw
</UL>

<P><STRONG><a name="[111]"></a>LCD_DrawUniLine</STRONG> (Thumb, 290 bytes, Stack size 72 bytes, guiprimitives.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClosedPolyLine
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PolyLine
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PolyLineRelativeClosed
</UL>

<P><STRONG><a name="[112]"></a>LCD_PolyLine</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, guiprimitives.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawUniLine
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClosedPolyLine
</UL>

<P><STRONG><a name="[114]"></a>LCD_ClosedPolyLine</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, guiprimitives.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PolyLine
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawUniLine
</UL>

<P><STRONG><a name="[115]"></a>LCD_PolyLineRelative</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, guiprimitives.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PolyLineRelativeClosed
</UL>

<P><STRONG><a name="[116]"></a>LCD_ClosedPolyLineRelative</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, guiprimitives.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PolyLineRelativeClosed
</UL>

<P><STRONG><a name="[117]"></a>LCD_FillPolyLine</STRONG> (Thumb, 584 bytes, Stack size 480 bytes, guiprimitives.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetColors
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[11c]"></a>LCD_DrawQuadRound</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, guiprimitives.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRoundedRect
</UL>

<P><STRONG><a name="[11d]"></a>LCD_DrawRoundedRect</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, guiprimitives.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawQuadRound
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFillRect
</UL>

<P><STRONG><a name="[11e]"></a>guiDrawString</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, guitext.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
</UL>

<P><STRONG><a name="[31b]"></a>uint8toString</STRONG> (Thumb, 108 bytes, Stack size 28 bytes, guitext.o(.text), UNUSED)

<P><STRONG><a name="[31c]"></a>int16toString</STRONG> (Thumb, 144 bytes, Stack size 28 bytes, guitext.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>int32toString</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, guitext.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = int32toString
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDownTouchControl
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDownBoxSetValue
</UL>

<P><STRONG><a name="[121]"></a>uint32toString</STRONG> (Thumb, 86 bytes, Stack size 28 bytes, guitext.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32toTime
</UL>

<P><STRONG><a name="[11f]"></a>LCD_ASCII</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, guitext.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
</UL>

<P><STRONG><a name="[120]"></a>uint32toTime</STRONG> (Thumb, 214 bytes, Stack size 36 bytes, guitext.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32toString
</UL>

<P><STRONG><a name="[132]"></a>wmObjInit</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, widget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wmObjInit
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelInit
</UL>

<P><STRONG><a name="[12b]"></a>wmTextInit</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, widget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wmTextInit
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDownBoxEditTextInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDownBoxLblTextInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonTextInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGroupItemInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGroupTextInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBoxTextInit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winUartCfgInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winPlotInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winMainInit
</UL>

<P><STRONG><a name="[124]"></a>wmGetTextPosition</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, widget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wmGetTextPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTextPositionInit
</UL>

<P><STRONG><a name="[123]"></a>wmGetTextLenWidth</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, widget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wmGetTextLenWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTextPositionInit
</UL>

<P><STRONG><a name="[122]"></a>wmTextPositionInit</STRONG> (Thumb, 46 bytes, Stack size 28 bytes, widget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wmTextPositionInit &rArr; wmGetTextLenWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmGetTextLenWidth
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmGetTextPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDownTouchControl
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDownBoxTextPosInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonTextInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGroupItemInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGroupTextInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBoxTextInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmObjTextInit
</UL>

<P><STRONG><a name="[125]"></a>wmObjTextInit</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, widget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wmObjTextInit &rArr; wmTextPositionInit &rArr; wmGetTextLenWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTextPositionInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winUartCfgInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winPlotInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winMainInit
</UL>

<P><STRONG><a name="[13a]"></a>wmTouchInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, widget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultUpDownBoxInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultTextButtonInit
</UL>

<P><STRONG><a name="[126]"></a>wmTouchControl</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, widget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wmTouchControl
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper_ShortOn
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDownTouchControl
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextButtonTouchControl
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGroupTouchControl
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBoxTouchControl
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_TouchCtrl
</UL>

<P><STRONG><a name="[1c9]"></a>defaultChartInit</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, guichart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = defaultChartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winPlotInit
</UL>

<P><STRONG><a name="[31d]"></a>chartSetData</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, guichart.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>guiChartDraw</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, guichart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = guiChartDraw &rArr; LCD_DrawLine &rArr; LCD_DrawFillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFillRect
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_OnPaint
</UL>

<P><STRONG><a name="[129]"></a>guiChartRefresh</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, guichart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = guiChartRefresh &rArr; LCD_DrawLine &rArr; LCD_DrawFillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotLeft
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotRight
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotCenter
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotUp
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotDown
</UL>

<P><STRONG><a name="[1b6]"></a>defaultCheckInit</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, guicheckbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = defaultCheckInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winUartCfgInit
</UL>

<P><STRONG><a name="[12a]"></a>CheckBoxTextInit</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, guicheckbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CheckBoxTextInit &rArr; wmTextPositionInit &rArr; wmGetTextLenWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTextPositionInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTextInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winUartCfgInit
</UL>

<P><STRONG><a name="[12c]"></a>CheckBoxDraw</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, guicheckbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CheckBoxDraw &rArr; LCD_DrawLine &rArr; LCD_DrawFillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawString
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiChangeColorLight
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColors
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFillRect
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_OnPaint
</UL>

<P><STRONG><a name="[12f]"></a>CheckBoxStateRefresh</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, guicheckbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CheckBoxStateRefresh &rArr; LCD_DrawFillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBoxTouchControl
</UL>

<P><STRONG><a name="[130]"></a>CheckBoxTouchControl</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, guicheckbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CheckBoxTouchControl &rArr; CheckBoxStateRefresh &rArr; LCD_DrawFillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBoxStateRefresh
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTouchControl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_TouchCtrl
</UL>

<P><STRONG><a name="[131]"></a>labelInit</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, guilabel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = labelInit &rArr; wmObjInit
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmObjInit
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultUpDownBoxInit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winUartCfgInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winPlotInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winMainInit
</UL>

<P><STRONG><a name="[133]"></a>guiLabelDraw</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, guilabel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = guiLabelDraw &rArr; LCD_DrawLine &rArr; LCD_DrawFillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawString
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiChangeColorLight
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColors
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFillRect
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDownTouchControl
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDownBoxDraw
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_OnPaint
</UL>

<P><STRONG><a name="[1b4]"></a>defaultRadioGroupInit</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, guiradiogroup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = defaultRadioGroupInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winUartCfgInit
</UL>

<P><STRONG><a name="[1b5]"></a>defaultRadioGroupItemInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, guiradiogroup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winUartCfgInit
</UL>

<P><STRONG><a name="[134]"></a>RadioGroupTextInit</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, guiradiogroup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RadioGroupTextInit &rArr; wmTextPositionInit &rArr; wmGetTextLenWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTextPositionInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTextInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winUartCfgInit
</UL>

<P><STRONG><a name="[135]"></a>RadioGroupItemInit</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, guiradiogroup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RadioGroupItemInit &rArr; wmTextPositionInit &rArr; wmGetTextLenWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTextPositionInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTextInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winUartCfgInit
</UL>

<P><STRONG><a name="[136]"></a>RadioGroupDraw</STRONG> (Thumb, 552 bytes, Stack size 24 bytes, guiradiogroup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RadioGroupDraw &rArr; LCD_DrawFullCircle &rArr; LCD_DrawCircle &rArr; LCD_PutPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFullCircle
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawString
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiChangeColorLight
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColors
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_OnPaint
</UL>

<P><STRONG><a name="[137]"></a>RadioGroupStateRefresh</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, guiradiogroup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RadioGroupStateRefresh &rArr; LCD_DrawFullCircle &rArr; LCD_DrawCircle &rArr; LCD_PutPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFullCircle
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColors
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGroupTouchControl
</UL>

<P><STRONG><a name="[138]"></a>RadioGroupTouchControl</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, guiradiogroup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RadioGroupTouchControl &rArr; RadioGroupStateRefresh &rArr; LCD_DrawFullCircle &rArr; LCD_DrawCircle &rArr; LCD_PutPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGroupStateRefresh
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTouchControl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_TouchCtrl
</UL>

<P><STRONG><a name="[31e]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[31f]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>defaultTextButtonInit</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, guitextbutton.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = defaultTextButtonInit
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTouchInit
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultUpDownBoxInit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winUartCfgInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winPlotInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winMainInit
</UL>

<P><STRONG><a name="[13b]"></a>ButtonTextInit</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, guitextbutton.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ButtonTextInit &rArr; wmTextPositionInit &rArr; wmGetTextLenWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTextPositionInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTextInit
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultUpDownBoxInit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winUartCfgInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winPlotInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winMainInit
</UL>

<P><STRONG><a name="[13c]"></a>TextButtonStateRefresh</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, guitextbutton.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TextButtonStateRefresh &rArr; LCD_DrawFillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDownTouchControl
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextButtonTouchControl
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextButtonDraw
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_TouchCtrl
</UL>

<P><STRONG><a name="[13d]"></a>TextButtonDraw</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, guitextbutton.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TextButtonDraw &rArr; TextButtonStateRefresh &rArr; LCD_DrawFillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextButtonStateRefresh
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawString
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColors
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFillRect
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDownBoxDraw
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_OnPaint
</UL>

<P><STRONG><a name="[13e]"></a>TextButtonTouchControl</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, guitextbutton.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextButtonStateRefresh
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTouchControl
</UL>

<P><STRONG><a name="[13f]"></a>touchSaveCoef</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, guitouchcalibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchSaveCoef &rArr; EE_WriteBuf &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchSetCoef
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchCalibration
</UL>

<P><STRONG><a name="[141]"></a>touchCalibration</STRONG> (Thumb, 1172 bytes, Stack size 8 bytes, guitouchcalibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchCalibration &rArr; touchSaveCoef &rArr; EE_WriteBuf &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchSetCoef
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchGetY
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchGetX
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTouchState
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchSaveCoef
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawString
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColors
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_appGUI_func
</UL>

<P><STRONG><a name="[145]"></a>touchLoadCoef</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, guitouchcalibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchLoadCoef &rArr; EE_ReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchSetCoef
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_appGUI_func
</UL>

<P><STRONG><a name="[147]"></a>defaultUpDownBoxInit</STRONG> (Thumb, 540 bytes, Stack size 48 bytes, guiupdownbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = defaultUpDownBoxInit &rArr; ButtonTextInit &rArr; wmTextPositionInit &rArr; wmGetTextLenWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonTextInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultTextButtonInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTouchInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winUartCfgInit
</UL>

<P><STRONG><a name="[148]"></a>UpDownBoxLblTextInit</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, guiupdownbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UpDownBoxLblTextInit &rArr; wmTextInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTextInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winUartCfgInit
</UL>

<P><STRONG><a name="[149]"></a>UpDownBoxEditTextInit</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, guiupdownbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UpDownBoxEditTextInit &rArr; wmTextInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTextInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winUartCfgInit
</UL>

<P><STRONG><a name="[14a]"></a>UpDownBoxTextPosInit</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, guiupdownbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UpDownBoxTextPosInit &rArr; wmTextPositionInit &rArr; wmGetTextLenWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTextPositionInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winUartCfgInit
</UL>

<P><STRONG><a name="[14b]"></a>UpDownBoxDraw</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, guiupdownbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UpDownBoxDraw &rArr; guiLabelDraw &rArr; LCD_DrawLine &rArr; LCD_DrawFillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextButtonDraw
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiLabelDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_OnPaint
</UL>

<P><STRONG><a name="[14c]"></a>UpDownBoxSetValue</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, guiupdownbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UpDownBoxSetValue &rArr; int32toString
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32toString
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winUartCfgInit
</UL>

<P><STRONG><a name="[321]"></a>UpDownBoxValueRedraw</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, guiupdownbox.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>UpDownTouchControl</STRONG> (Thumb, 478 bytes, Stack size 32 bytes, guiupdownbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UpDownTouchControl &rArr; guiLabelDraw &rArr; LCD_DrawLine &rArr; LCD_DrawFillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextButtonStateRefresh
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiLabelDraw
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTouchControl
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTextPositionInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32toString
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_TouchCtrl
</UL>

<P><STRONG><a name="[14f]"></a>Beeper_Init</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, beeper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[25]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, beeper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = TIM1_BRK_TIM9_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_int_exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[127]"></a>Beeper_ShortOn</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, beeper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTouchControl
</UL>

<P><STRONG><a name="[322]"></a>Beeper_Off</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, beeper.o(.text), UNUSED)

<P><STRONG><a name="[323]"></a>Beeper_InterruptOn</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, beeper.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>LCD_Reset_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mkdriver_207z.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Reset_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[f2]"></a>LCD_Reset_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mkdriver_207z.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Reset_On
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[15f]"></a>Delay_ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mkdriver_207z.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiDelay_ms
</UL>

<P><STRONG><a name="[f1]"></a>guiDelay_ms</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, mkdriver_207z.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = guiDelay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init_ILI9320
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init_HX8347A
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[f9]"></a>LCD_WriteReg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mkdriver_207z.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow_ILI9320
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow_HX8347A
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init_ILI9320
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init_HX8347A
</UL>

<P><STRONG><a name="[eb]"></a>LCD_ReadReg</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mkdriver_207z.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTypeLCD
</UL>

<P><STRONG><a name="[fb]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mkdriver_207z.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBitmap_HX8347A
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBitmap_ILI9320
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP_ILI9320
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP_HX8347A
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel_ILI9320
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel_HX8347A
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawMonoPict_ILI9320
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawMonoPict_HX8347A
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFillRect_ILI9320
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFillRect_HX8347A
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar_ILI9320
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar_HX8347A
</UL>

<P><STRONG><a name="[fc]"></a>LCD_WriteRAM</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mkdriver_207z.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBitmap_HX8347A
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBitmap_ILI9320
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP_ILI9320
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP_HX8347A
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel_ILI9320
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel_HX8347A
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawMonoPict_ILI9320
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawMonoPict_HX8347A
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFillRect_ILI9320
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFillRect_HX8347A
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar_ILI9320
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar_HX8347A
</UL>

<P><STRONG><a name="[324]"></a>LCD_ReadRAM</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mkdriver_207z.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>LCD_CtrlLinesConfig</STRONG> (Thumb, 338 bytes, Stack size 16 bytes, mkdriver_207z.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_CtrlLinesConfig &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset_On
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[ef]"></a>LCD_FSMCConfig</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, mkdriver_207z.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_FSMCConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[140]"></a>touchSetCoef</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ads7843_207z.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchSetCoef
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchLoadCoef
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchCalibration
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchSaveCoef
</UL>

<P><STRONG><a name="[325]"></a>touchGetCoef</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ads7843_207z.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>touchVerifyCoef</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ads7843_207z.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_appGUI_func
</UL>

<P><STRONG><a name="[164]"></a>TP_SPI_Config</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, ads7843_207z.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TP_SPI_Config &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CalculateCRC
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSOutputCmd
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NSSInternalSoftwareConfig
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[143]"></a>touchGetX</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ads7843_207z.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchGetX
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchGetSense
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchCalibration
</UL>

<P><STRONG><a name="[144]"></a>touchGetY</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ads7843_207z.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchGetY
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchGetSense
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchCalibration
</UL>

<P><STRONG><a name="[16f]"></a>touchGetSense</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ads7843_207z.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchGetSense &rArr; touchGetY
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchGetY
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchGetX
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Control
</UL>

<P><STRONG><a name="[142]"></a>getTouchState</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ads7843_207z.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getTouchState
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchCalibration
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_appGUI_func
</UL>

<P><STRONG><a name="[79]"></a>main</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = main &rArr; tn_start_system &rArr; tn_task_create &rArr; task_to_runnable
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_start_system
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_arm_disable_interrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[81]"></a>tn_app_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tn_app_init &rArr; uart_task_create &rArr; tn_task_create &rArr; task_to_runnable
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_task_create
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appGUI_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_timer_task_func
</UL>

<P><STRONG><a name="[326]"></a>getSystemTimer1ms</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tn_user.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>getSystemTimer1s</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tn_user.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>setSystemTimer1s</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tn_user.o(.text), UNUSED)

<P><STRONG><a name="[329]"></a>delay_ms</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tn_user.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tn_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; tn_tick_int_processing
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_int_exit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_tick_int_processing
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_calc_performance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tn_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = DMA1_Stream1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_int_exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tn_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = DMA1_Stream3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_int_exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tn_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = DMA1_Stream5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_int_exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tn_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = DMA1_Stream6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_int_exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tn_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = DMA2_Stream5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_int_exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tn_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = DMA2_Stream7_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_int_exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tn_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_int_exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tn_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_int_exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tn_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_int_exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>tn_cpu_int_enable</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tn_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tn_cpu_int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_arm_enable_interrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_timer_task_func
</UL>

<P><STRONG><a name="[8d]"></a>tn_inside_int</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tn_user.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_change_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_delete
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_terminate
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_exit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_irelease_wait
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_release_wait
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_iactivate
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_activate
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_iwakeup
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_wakeup
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_sleep
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_resume
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_suspend
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_unlock
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_lock_polling
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_lock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_mutex_delete
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_create
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_tick_int_processing
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_sys_tslice_ticks
</UL>

<P><STRONG><a name="[32a]"></a>getAdcResult</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hw_init.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>SysTick_cfg</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, hw_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SysTick_cfg &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[17c]"></a>RTC_cfg</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, hw_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC_cfg &rArr; RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFlagStatus
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[184]"></a>RCC_Configuration</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, hw_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_Configuration &rArr; RCC_PLLConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSICmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[171]"></a>HardwareInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hw_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HardwareInit &rArr; TP_SPI_Config &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_SPI_Config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_cfg
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[191]"></a>ADC_cfg</STRONG> (Thumb, 348 bytes, Stack size 160 bytes, hw_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorVrefintCmd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>

<P><STRONG><a name="[19b]"></a>GPIO_Configuration</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, hw_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[19d]"></a>NVIC_cfg</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, hw_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[32b]"></a>DMA_cfg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hw_init.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>UART3_cfg</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, hw_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[32c]"></a>SPI_TC_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hw_init.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>iwdg_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hw_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
</UL>

<P><STRONG><a name="[1a6]"></a>task_uart_func</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tn_task_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = task_uart_func &rArr; tn_task_sleep &rArr; task_curr_to_wait_action &rArr; task_to_non_runnable &rArr; find_next_task_to_run
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tn_task_usart.o(.text)
</UL>
<P><STRONG><a name="[173]"></a>uart_task_create</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tn_task_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = uart_task_create &rArr; tn_task_create &rArr; task_to_runnable
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_app_init
</UL>

<P><STRONG><a name="[1a8]"></a>task_appGUI_func</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, appgui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = task_appGUI_func &rArr; HMI_Control &rArr; HMI_ChangeWindow &rArr; winPlotInit &rArr; plotDataCalculate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_sleep
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchVerifyCoef
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTouchState
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchLoadCoef
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchCalibration
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgui.o(.text)
</UL>
<P><STRONG><a name="[172]"></a>appGUI_task_create</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, appgui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = appGUI_task_create &rArr; tn_task_create &rArr; task_to_runnable
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_app_init
</UL>

<P><STRONG><a name="[1ab]"></a>HMI_TouchCtrl</STRONG> (Thumb, 458 bytes, Stack size 16 bytes, hmi_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HMI_TouchCtrl &rArr; RadioGroupTouchControl &rArr; RadioGroupStateRefresh &rArr; LCD_DrawFullCircle &rArr; LCD_DrawCircle &rArr; LCD_PutPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDownTouchControl
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextButtonStateRefresh
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGroupTouchControl
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBoxTouchControl
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTouchControl
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Control
</UL>

<P><STRONG><a name="[1ac]"></a>HMI_OnPaint</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, hmi_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HMI_OnPaint &rArr; RadioGroupDraw &rArr; LCD_DrawFullCircle &rArr; LCD_DrawCircle &rArr; LCD_PutPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDownBoxDraw
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextButtonDraw
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGroupDraw
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiLabelDraw
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBoxDraw
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiChartDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ChangeWindow
</UL>

<P><STRONG><a name="[1ad]"></a>HMI_ChangeWindow</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hmi_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = HMI_ChangeWindow &rArr; winPlotInit &rArr; plotDataCalculate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winUartCfgInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winPlotInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winMainInit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_OnPaint
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnUartCfg_CancelClick
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnUartCfg_OKClick
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnMain_Menu
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnMain_Plot
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMIBtn_Exit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Control
</UL>

<P><STRONG><a name="[1aa]"></a>HMI_Control</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hmi_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = HMI_Control &rArr; HMI_ChangeWindow &rArr; winPlotInit &rArr; plotDataCalculate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchGetSense
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ChangeWindow
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_TouchCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_appGUI_func
</UL>

<P><STRONG><a name="[6f]"></a>HMIBtn_Exit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hmi_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = HMIBtn_Exit &rArr; HMI_ChangeWindow &rArr; winPlotInit &rArr; plotDataCalculate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ChangeWindow
</UL>
<BR>[Address Reference Count : 2]<UL><LI> winuartcfg.o(.text)
<LI> winplot.o(.text)
</UL>
<P><STRONG><a name="[1b1]"></a>btnMain_Plot</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, winmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = btnMain_Plot &rArr; HMI_ChangeWindow &rArr; winPlotInit &rArr; plotDataCalculate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ChangeWindow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> winmain.o(.text)
</UL>
<P><STRONG><a name="[1b2]"></a>btnMain_Menu</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, winmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = btnMain_Menu &rArr; HMI_ChangeWindow &rArr; winPlotInit &rArr; plotDataCalculate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ChangeWindow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> winmain.o(.text)
</UL>
<P><STRONG><a name="[1ae]"></a>winMainInit</STRONG> (Thumb, 580 bytes, Stack size 48 bytes, winmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = winMainInit &rArr; ButtonTextInit &rArr; wmTextPositionInit &rArr; wmGetTextLenWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonTextInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultTextButtonInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmObjTextInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTextInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ChangeWindow
</UL>

<P><STRONG><a name="[1b3]"></a>btnUartCfg_OKClick</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, winuartcfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = btnUartCfg_OKClick &rArr; HMI_ChangeWindow &rArr; winPlotInit &rArr; plotDataCalculate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ChangeWindow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> winuartcfg.o(.text)
</UL>
<P><STRONG><a name="[1af]"></a>winUartCfgInit</STRONG> (Thumb, 1702 bytes, Stack size 56 bytes, winuartcfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = winUartCfgInit &rArr; defaultUpDownBoxInit &rArr; ButtonTextInit &rArr; wmTextPositionInit &rArr; wmGetTextLenWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDownBoxSetValue
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDownBoxTextPosInit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDownBoxEditTextInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDownBoxLblTextInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultUpDownBoxInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonTextInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultTextButtonInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGroupItemInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGroupTextInit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultRadioGroupItemInit
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultRadioGroupInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBoxTextInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultCheckInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmObjTextInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTextInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ChangeWindow
</UL>

<P><STRONG><a name="[1b7]"></a>btnUartCfg_CancelClick</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, winuartcfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ChangeWindow
</UL>

<P><STRONG><a name="[1b8]"></a>plotDataCalculate</STRONG> (Thumb, 218 bytes, Stack size 104 bytes, winplot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = plotDataCalculate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotLeft
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotRight
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotCenter
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotUp
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotDown
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winPlotInit
</UL>

<P><STRONG><a name="[1c2]"></a>plotDown</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, winplot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = plotDown &rArr; plotDataCalculate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiChartRefresh
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotDataCalculate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> winplot.o(.text)
</UL>
<P><STRONG><a name="[1c4]"></a>plotUp</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, winplot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = plotUp &rArr; plotDataCalculate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiChartRefresh
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotDataCalculate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> winplot.o(.text)
</UL>
<P><STRONG><a name="[1c5]"></a>plotCenter</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, winplot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = plotCenter &rArr; plotDataCalculate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiChartRefresh
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotDataCalculate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> winplot.o(.text)
</UL>
<P><STRONG><a name="[1c6]"></a>plotRight</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, winplot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = plotRight &rArr; plotDataCalculate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiChartRefresh
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotDataCalculate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> winplot.o(.text)
</UL>
<P><STRONG><a name="[1c7]"></a>plotLeft</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, winplot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = plotLeft &rArr; plotDataCalculate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiChartRefresh
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotDataCalculate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> winplot.o(.text)
</UL>
<P><STRONG><a name="[1b0]"></a>winPlotInit</STRONG> (Thumb, 694 bytes, Stack size 48 bytes, winplot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = winPlotInit &rArr; plotDataCalculate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonTextInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultTextButtonInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelInit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultChartInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmObjTextInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmTextInit
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotDataCalculate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ChangeWindow
</UL>

<P><STRONG><a name="[32d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[32e]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[32f]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[1cc]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[1cb]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[330]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[332]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[333]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[7a]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[7e]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[334]"></a>tn_startup_hardware_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_hardware_init.o(HardwareInit), UNUSED)

<P><STRONG><a name="[170]"></a>tn_arm_disable_interrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_hardware_init.o(HardwareInit))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17a]"></a>tn_arm_enable_interrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_hardware_init.o(HardwareInit))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_int_enable
</UL>

<P><STRONG><a name="[1d8]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[1d0]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[1d5]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[1d6]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1d7]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[1da]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[1db]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[1d9]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[1bd]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotDataCalculate
</UL>

<P><STRONG><a name="[1c3]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotUp
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotDown
</UL>

<P><STRONG><a name="[1dc]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1c0]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotDataCalculate
</UL>

<P><STRONG><a name="[1df]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[1e2]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[1e8]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[1bc]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotDown
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotDataCalculate
</UL>

<P><STRONG><a name="[1e4]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1d2]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1e5]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1c1]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotDataCalculate
</UL>

<P><STRONG><a name="[1e6]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillPolyLine
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotDataCalculate
</UL>

<P><STRONG><a name="[335]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[118]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillPolyLine
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotDataCalculate
</UL>

<P><STRONG><a name="[336]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[11a]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillPolyLine
</UL>

<P><STRONG><a name="[1e7]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[1eb]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[1bb]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotUp
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotDataCalculate
</UL>

<P><STRONG><a name="[1e9]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1de]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1e1]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillPolyLine
</UL>

<P><STRONG><a name="[1ea]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[1d3]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1ec]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1d1]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1ee]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1ba]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotUp
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotDown
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotDataCalculate
</UL>

<P><STRONG><a name="[1ef]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[337]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)

<P><STRONG><a name="[1f1]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[1c8]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotLeft
</UL>

<P><STRONG><a name="[1f3]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1b9]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotDataCalculate
</UL>

<P><STRONG><a name="[338]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[1be]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotRight
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotDataCalculate
</UL>

<P><STRONG><a name="[1f4]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1f0]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[1dd]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1bf]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotDataCalculate
</UL>

<P><STRONG><a name="[1f5]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[1e3]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[1d4]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1f7]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5f]"></a>tn_idle_task_func</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tn.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_save_sr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_restore_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tn.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>tn_timer_task_func</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, tn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tn_timer_task_func &rArr; tn_app_init &rArr; uart_task_create &rArr; tn_task_create &rArr; task_to_runnable
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_switch_context
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_save_sr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_restore_sr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_cpu_int_enable
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_app_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wait_complete
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_curr_to_wait_action
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_remove_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tn.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>TI4_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[c7]"></a>TI3_Config</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[c5]"></a>TI2_Config</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[c3]"></a>TI1_Config</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[dd]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>

<P><STRONG><a name="[dc]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeStamp
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarm
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>

<P><STRONG><a name="[e9]"></a>SetSysClock</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, system_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[113]"></a>LCD_PolyLineRelativeClosed</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, guiprimitives.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawUniLine
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClosedPolyLineRelative
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PolyLineRelative
</UL>

<P><STRONG><a name="[174]"></a>tn_calc_performance</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tn_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tn_calc_performance
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tn_int_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1ed]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[1e0]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1f6]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[1f2]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
