


ARM Macro Assembler    Page 1 


    1 00000000         ;-------------------------------------------------------
                       -----------------------
    2 00000000         ;
    3 00000000         ;  TNKernel RTOS port for ARM(c) Cortex-M3(c) core
    4 00000000         ;
    5 00000000         ;  Copyright © 2004, 2010 Yuri Tiomkin
    6 00000000         ;  All rights reserved.
    7 00000000         ;
    8 00000000         ;  v.2.6
    9 00000000         ;
   10 00000000         ;  Assembler:   ARM(c)
   11 00000000         ;
   12 00000000         ;
   13 00000000         ; Permission to use, copy, modify, and distribute this s
                       oftware in source
   14 00000000         ; and binary forms and its documentation for any purpose
                        and without fee
   15 00000000         ; is hereby granted, provided that the above copyright n
                       otice appear
   16 00000000         ; in all copies and that both that copyright notice and 
                       this permission
   17 00000000         ; notice appear in supporting documentation.
   18 00000000         ;
   19 00000000         ; THIS SOFTWARE IS PROVIDED BY THE YURI TIOMKIN AND CONT
                       RIBUTORS "AS IS" AND
   20 00000000         ; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
                       LIMITED TO, THE
   21 00000000         ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
                       A PARTICULAR PURPOSE
   22 00000000         ; ARE DISCLAIMED. IN NO EVENT SHALL YURI TIOMKIN OR CONT
                       RIBUTORS BE LIABLE
   23 00000000         ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLA
                       RY, OR CONSEQUENTIAL
   24 00000000         ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
                        SUBSTITUTE GOODS
   25 00000000         ; OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINES
                       S INTERRUPTION)
   26 00000000         ; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
                        IN CONTRACT, STRICT
   27 00000000         ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                        ARISING IN ANY WAY
   28 00000000         ; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF TH
                       E POSSIBILITY OF
   29 00000000         ; SUCH DAMAGE.
   30 00000000         ;-------------------------------------------------------
                       -----------------------
   31 00000000         
   32 00000000         
   33 00000000                 PRESERVE8
   34 00000000         
   35 00000000         ;-- External references
   36 00000000         
   37 00000000                 IMPORT           tn_curr_run_task
   38 00000000                 IMPORT           tn_next_task_to_run
   39 00000000                 IMPORT           tn_system_state
   40 00000000         
   41 00000000         
   42 00000000         ;-- Public functions declared in this file
   43 00000000         



ARM Macro Assembler    Page 2 


   44 00000000                 EXPORT           tn_switch_context_exit
   45 00000000                 EXPORT           tn_switch_context
   46 00000000                 EXPORT           tn_cpu_save_sr
   47 00000000                 EXPORT           tn_cpu_restore_sr
   48 00000000                 EXPORT           tn_start_exe
   49 00000000                 EXPORT           tn_chk_irq_disabled
   50 00000000                 EXPORT           PendSV_Handler
   51 00000000                 EXPORT           tn_int_exit
   52 00000000                 EXPORT           ffs_asm
   53 00000000         
   54 00000000         ;--  Interrupt Control State Register Address
   55 00000000         
   56 00000000 E000ED04 
                       ICSR_ADDR
                               EQU              0xE000ED04
   57 00000000         
   58 00000000         ;--  pendSV bit in the Interrupt Control State Register
   59 00000000         
   60 00000000 10000000 
                       PENDSVSET
                               EQU              0x10000000
   61 00000000         
   62 00000000         ;--  System Handlers 12-15 Priority Register Address
   63 00000000         
   64 00000000 E000ED20 
                       PR_12_15_ADDR
                               EQU              0xE000ED20
   65 00000000         
   66 00000000         ;--  PRI_14 (PendSV) priority in the System Handlers 12-
                       15 Priority Register Address
   67 00000000         ;--  PendSV priority is minimal (0xFF)
   68 00000000         
   69 00000000 00FF0000 
                       PENDS_VPRIORITY
                               EQU              0x00FF0000
   70 00000000         
   71 00000000         ;-------------------------------------------------------
                       ---------------------
   72 00000000         ;
   73 00000000         ;-------------------------------------------------------
                       ---------------------
   74 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
3
   75 00000000                 THUMB
   76 00000000                 REQUIRE8
   77 00000000                 PRESERVE8
   78 00000000         
   79 00000000         ;-------------------------------------------------------
                       ---------------------
   80 00000000         ; Interrups not yet enabled
   81 00000000         ;-------------------------------------------------------
                       ---------------------
   82 00000000         tn_start_exe
   83 00000000         
   84 00000000 492F            ldr              r1, =PR_12_15_ADDR ;-- Load the
                                                             System 12-15 Prior
                                                            ity Register
   85 00000002 6808            ldr              r0, [r1]
   86 00000004 F440 007F       orr              r0, r0, #PENDS_VPRIORITY ;-- se



ARM Macro Assembler    Page 3 


                                                            t PRI_14 (PendSV) t
                                                            o 0xFF - minimal
   87 00000008 6008            str              r0, [r1]
   88 0000000A         
   89 0000000A 492E            ldr              r1, =tn_system_state ;-- Indica
                                                            te that system has 
                                                            started
   90 0000000C F04F 0001       mov              r0, #1      ;-- 1 -> TN_SYS_STA
                                                            TE_RUNNING
   91 00000010 7008            strb             r0, [r1]
   92 00000012         
   93 00000012         ;---------------
   94 00000012         
   95 00000012 492D            ldr              r1, =tn_curr_run_task ; =tn_nex
                                                            t_task_to_run
   96 00000014 680A            ldr              r2, [r1]
   97 00000016 6810            ldr              r0, [r2]    ;-- in r0 - new tas
                                                            k SP
   98 00000018         
   99 00000018 E8B0 0FF0       ldmia            r0!, {r4-r11}
  100 0000001C F380 8809       msr              PSP, r0
  101 00000020 F04E 0E04       orr              lr, lr, #0x04 ;-- Force to new 
                                                            process PSP
  102 00000024         
  103 00000024         ;tn_switch_context_exit
  104 00000024         
  105 00000024 4929            ldr              r1, =ICSR_ADDR ;-- Trigger Pend
                                                            SV exception
  106 00000026 F04F 5080       ldr              r0, =PENDSVSET
  107 0000002A 6008            str              r0, [r1]
  108 0000002C         
  109 0000002C B662            cpsie            I           ;-- Enable core int
                                                            errupts
  110 0000002E         
  111 0000002E         ;--- Never reach this
  112 0000002E         
  113 0000002E E7FE            b                .
  114 00000030         ;  bx lr
  115 00000030         
  116 00000030         ;-------------------------------------------------------
                       ---------------------
  117 00000030         PendSV_Handler
  118 00000030         
  119 00000030 B672            cpsid            I           ;   Disable core in
                                                            t
  120 00000032         
  121 00000032 4B25            ldr              r3, =tn_curr_run_task ;  in R3 
                                                            - =tn_curr_run_task
                                                            
  122 00000034 6819            ldr              r1, [r3]    ;  in R1 - tn_curr_
                                                            run_task
  123 00000036 4A26            ldr              r2, =tn_next_task_to_run
  124 00000038 6812            ldr              r2, [r2]    ;  in R2 - tn_next_
                                                            task_to_run
  125 0000003A 4291            cmp              r1, r2
  126 0000003C D00C            beq              exit_context_switch
  127 0000003E         
  128 0000003E         ;-------------------------------------
  129 0000003E         



ARM Macro Assembler    Page 4 


  130 0000003E F3EF 8009       mrs              r0, psp     ;  in PSP - process
                                                            (task) stack pointe
                                                            r
  131 00000042 E920 0FF0       stmdb            r0!, {r4-r11}
  132 00000046         
  133 00000046 6008            str              r0, [r1]    ;  save own SP in T
                                                            CB
  134 00000048 601A            str              r2, [r3]    ;  in r3 - =tn_curr
                                                            _run_task
  135 0000004A 6810            ldr              r0, [r2]    ;  in r0 - new task
                                                             SP
  136 0000004C         
  137 0000004C E8B0 0FF0       ldmia            r0!, {r4-r11}
  138 00000050 F380 8809       msr              psp, r0
  139 00000054 F04E 0E04       orr              lr, lr, #0x04 ;  Force to new p
                                                            rocess PSP
  140 00000058         
  141 00000058         ;-------------------------------------
  142 00000058         
  143 00000058         exit_context_switch
  144 00000058         
  145 00000058 B662            cpsie            I           ;  enable core int
  146 0000005A         
  147 0000005A 4770            bx               lr
  148 0000005C         
  149 0000005C         ;-------------------------------------------------------
                       ----------------------
  150 0000005C         tn_switch_context_exit
  151 0000005C         
  152 0000005C         ;  Thanks to Sergey Koshkin
  153 0000005C         
  154 0000005C         ;--- At the interrupt request below, the PSP will be use
                       d to
  155 0000005C         ;--- store manually saved 8 registers (r4-r11)
  156 0000005C         
  157 0000005C 491A            ldr              r1,  =tn_curr_run_task
  158 0000005E 680A            ldr              r2,  [r1]
  159 00000060 6810            ldr              r0,  [r2]   ;-- in r0 - tn_cur_
                                                            run_task stack
  160 00000062         
  161 00000062         ;--- Preset PSP stack
  162 00000062         
  163 00000062 F100 0020       add              r0,  r0, #32 ;-- 8*4 - 8 manual
                                                            ly saved registers
  164 00000066 F380 8809       msr              psp, r0
  165 0000006A         
  166 0000006A         ; --- At the interrupt request below, the MSP will be us
                       ed
  167 0000006A         ;--- to store automaticaly saved 8 registers
  168 0000006A         
  169 0000006A         ;--- Preset MSP stack
  170 0000006A         
  171 0000006A F3EF 8008       mrs              r0,  msp
  172 0000006E 3020            adds             r0,  r0, #32 ; 8*4 - 8 automati
                                                            cally saved registe
                                                            rs at the PendSV in
                                                            terrupt
  173 00000070 F380 8808       msr              msp, r0
  174 00000074         



ARM Macro Assembler    Page 5 


  175 00000074 F04F 0000       mov              r0,  #0     ; Default stack MSP
                                                            (Main stack pointer
                                                            ) is used
  176 00000078 F380 8814       msr              control, r0
  177 0000007C         
  178 0000007C         ;-------------------------------
  179 0000007C         
  180 0000007C 4913            ldr              r1,  =ICSR_ADDR ;  Trigger Pend
                                                            SV exception
  181 0000007E F04F 5080       ldr              r0,  =PENDSVSET
  182 00000082 6008            str              r0,  [r1]
  183 00000084         
  184 00000084 B662            cpsie            I           ;  Enable core inte
                                                            rrupts
  185 00000086         
  186 00000086         ; - Should never reach
  187 00000086         
  188 00000086 E7FE            b                .
  189 00000088         
  190 00000088         ;-------------------------------------------------------
                       ----------------------
  191 00000088         tn_switch_context
  192 00000088         
  193 00000088         ;---  Just Invoke PendSV exception
  194 00000088         
  195 00000088 4910            ldr              r1,  =ICSR_ADDR
  196 0000008A F04F 5080       ldr              r0,  =PENDSVSET
  197 0000008E 6008            str              r0,  [r1]
  198 00000090         
  199 00000090 4770            bx               lr
  200 00000092         
  201 00000092         ;-------------------------------------------------------
                       ----------------------
  202 00000092         tn_int_exit
  203 00000092         
  204 00000092 490E            ldr              r1,  =ICSR_ADDR ;-- Invoke Pend
                                                            SV exception
  205 00000094 F04F 5080       ldr              r0,  =PENDSVSET
  206 00000098 6008            str              r0,  [r1]
  207 0000009A         
  208 0000009A 4770            bx               lr
  209 0000009C         
  210 0000009C         ;-------------------------------------------------------
                       ----------------------
  211 0000009C         tn_cpu_save_sr
  212 0000009C         
  213 0000009C F3EF 8010       mrs              r0, PRIMASK
  214 000000A0 B672            cpsid            I
  215 000000A2 4770            bx               lr
  216 000000A4         
  217 000000A4         ;-------------------------------------------------------
                       ----------------------
  218 000000A4         tn_cpu_restore_sr
  219 000000A4         
  220 000000A4 F380 8810       msr              PRIMASK, r0
  221 000000A8 4770            bx               lr
  222 000000AA         
  223 000000AA         
  224 000000AA         ;-------------------------------------------------------



ARM Macro Assembler    Page 6 


                       ----------------------
  225 000000AA         tn_chk_irq_disabled
  226 000000AA         
  227 000000AA F3EF 8010       mrs              r0,PRIMASK
  228 000000AE 4770            bx               lr
  229 000000B0         
  230 000000B0         ;-------------------------------------------------------
                       ----------------------
  231 000000B0         ffs_asm
  232 000000B0         
  233 000000B0 4601            mov              r1, r0      ;-- tmp = in
  234 000000B2 4248            rsbs             r0, r1, #0  ;-- in = -in
  235 000000B4 4008            ands             r0, r0, r1  ;-- in = in & tmp
  236 000000B6 FAB0 F080       CLZ.W            r0, r0
  237 000000BA F1C0 0020       rsb              r0, r0, #0x20 ;-- 32 - in
  238 000000BE 4770            bx               lr
  239 000000C0         
  240 000000C0         ;-------------------------------------------------------
                       ---------------------
  241 000000C0         
  242 000000C0                 END
              E000ED20 
              00000000 
              00000000 
              E000ED04 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\out\tn_port_cm3_armcc.d -o.\out\tn_port_cm3_armcc.o -IC:\Keil
_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F4
xx --predefine="__UVISION_VERSION SETA 514" --list=.\tn_port_cm3_armcc.lst TNKe
rnel\CortexM3\tn_port_cm3_armcc.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 74 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
   Uses
      None
Comment: .text unused
PendSV_Handler 00000030

Symbol: PendSV_Handler
   Definitions
      At line 117 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
   Uses
      At line 50 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
Comment: PendSV_Handler used once
exit_context_switch 00000058

Symbol: exit_context_switch
   Definitions
      At line 143 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
   Uses
      At line 126 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
Comment: exit_context_switch used once
ffs_asm 000000B0

Symbol: ffs_asm
   Definitions
      At line 231 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
   Uses
      At line 52 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
Comment: ffs_asm used once
tn_chk_irq_disabled 000000AA

Symbol: tn_chk_irq_disabled
   Definitions
      At line 225 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
   Uses
      At line 49 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
Comment: tn_chk_irq_disabled used once
tn_cpu_restore_sr 000000A4

Symbol: tn_cpu_restore_sr
   Definitions
      At line 218 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
   Uses
      At line 47 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
Comment: tn_cpu_restore_sr used once
tn_cpu_save_sr 0000009C

Symbol: tn_cpu_save_sr
   Definitions
      At line 211 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
   Uses
      At line 46 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
Comment: tn_cpu_save_sr used once
tn_int_exit 00000092

Symbol: tn_int_exit



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 202 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
   Uses
      At line 51 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
Comment: tn_int_exit used once
tn_start_exe 00000000

Symbol: tn_start_exe
   Definitions
      At line 82 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
   Uses
      At line 48 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
Comment: tn_start_exe used once
tn_switch_context 00000088

Symbol: tn_switch_context
   Definitions
      At line 191 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
   Uses
      At line 45 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
Comment: tn_switch_context used once
tn_switch_context_exit 0000005C

Symbol: tn_switch_context_exit
   Definitions
      At line 150 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
   Uses
      At line 44 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
Comment: tn_switch_context_exit used once
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ICSR_ADDR E000ED04

Symbol: ICSR_ADDR
   Definitions
      At line 56 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
   Uses
      At line 105 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
      At line 180 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
      At line 195 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
      At line 204 in file TNKernel\CortexM3\tn_port_cm3_armcc.s

PENDSVSET 10000000

Symbol: PENDSVSET
   Definitions
      At line 60 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
   Uses
      At line 106 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
      At line 181 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
      At line 196 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
      At line 205 in file TNKernel\CortexM3\tn_port_cm3_armcc.s

PENDS_VPRIORITY 00FF0000

Symbol: PENDS_VPRIORITY
   Definitions
      At line 69 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
   Uses
      At line 86 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
Comment: PENDS_VPRIORITY used once
PR_12_15_ADDR E000ED20

Symbol: PR_12_15_ADDR
   Definitions
      At line 64 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
   Uses
      At line 84 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
Comment: PR_12_15_ADDR used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

tn_curr_run_task 00000000

Symbol: tn_curr_run_task
   Definitions
      At line 37 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
   Uses
      At line 95 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
      At line 121 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
      At line 157 in file TNKernel\CortexM3\tn_port_cm3_armcc.s

tn_next_task_to_run 00000000

Symbol: tn_next_task_to_run
   Definitions
      At line 38 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
   Uses
      At line 123 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
Comment: tn_next_task_to_run used once
tn_system_state 00000000

Symbol: tn_system_state
   Definitions
      At line 39 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
   Uses
      At line 89 in file TNKernel\CortexM3\tn_port_cm3_armcc.s
Comment: tn_system_state used once
3 symbols
352 symbols in table
